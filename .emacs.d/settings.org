#+TITLE:   Sean's Emacs Configuration
#+AUTHOR:  Sean Duckett
#+EMAIL:   sduckett@gmail.com
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes
#+HTML_HEAD: <link rel="stylesheet" href="http://dakrone.github.io/org.css" type="text/css" />
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+TODO: SOMEDAY(s) TODO(t) INPROGRESS(i) WAITING(w@/!) NEEDSREVIEW(n@/!) | DONE(d)
#+TODO: WAITING(w@/!) HOLD(h@/!) | CANCELLED(c@/!)
#+TAGS: export(e) noexport(n)
#+STARTUP: align fold nodlcheck lognotestate content

* Foreward

  This is a work in progress, where I attempt to write a literate configuration
  file for Emacs and see how it affects my thinking of the system as a whole.
  Depending on what version of this work you are reading, there might be steps
  that don't work, broken code, and descriptions that are hard to follow. Please
  accept my apologies and inform me of any glaring omissions. If anything is
  gained in the process, I will consider it to have been a useful exercise.

  This file was last exported: {{{time(%Y-%m-%d %H:%M)}}}

* Introduction

  The idea of writing a literate configuration file was mentioned during
  a recent office-hours chat, but the benefits described were limited to
  one: looking good on Github. I'm not sure I believe it, so I decided
  to give it a try and see if I happen to notice any additional benefits.

** Getting Started
  To get started, have a look at your `~/.emacs.d/init.el`. If you've done any
  Emacs customizations there (font / color tweaks, etc), move them to a file
  (perhaps `~/.emacs.d/custom-additions.el`) that you can load them after we do
  some setup.

  Next, put the following in `~/.emacs.d/init.el`:

#+BEGIN_SRC
  ;; keep customized settings in their own file
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; translate the literate configuration and load it.
  (require 'org)
  (org-babel-load-file
   (expand-file-name "settings.org"
                     user-emacs-directory))
#+END_SRC

  This gives use the ability to write a literate org-mode file using [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel]]; this
  is simply an org file with code blocks interspersed. When we load this file
  with `org-babel-load-file`, it is transformed into Emacs Lisp by stripping the
  text away from the code blocks. This is the platform from which the rest of
  the configuration is built.

** Package Management Setup

The first thing to do is setup package managment with a few of our favorite
collections.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (when (< emacs-major-version 24)
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
#+END_SRC

Some of the packages I use get released with breaking changes from time to time,
so it seems prudent to only use the versions hosted by the "stable"
repositories.

#+begin_src emacs-lisp :tangle yes
    (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
    (add-to-list 'package-pinned-packages '(clj-refactor . "melpa-stable") t)

    (package-initialize)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defvar smd/packages-to-install
    '(use-package gist fuzzy popup company expand-region smex ido-vertical-mode
       ido-ubiquitous yasnippet projectile multiple-cursors ace-jump-mode
       idle-highlight-mode highlight-symbol highlight-numbers highlight-quoted
       org htmlize gnuplot-mode gnuplot wc-mode ssh-config-mode flycheck flycheck-tip
       clojure-mode clojure-mode-extra-font-locking cider paredit paren-face
       ;; ruby-mode ruby-test-mode inf-ruby puppet-mode rbenv chruby
       elisp-slime-nav paredit markdown-mode markdown-mode+ yaml-mode
       magit git-gutter git-timemachine magit-gh-pulls with-editor git-annex))

  (dolist (package smd/packages-to-install)
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

Load [[https://github.com/jwiegley/use-package][use-package]] for loading packages everywhere else. If you set
`use-package-verbose` to `t`, it will debug package loading.

#+begin_src emacs-lisp :tangle yes
  (require 'use-package)
  (setq use-package-verbose nil)
#+end_src

* Configuration
** Using org-mode to keep track of things
*** Basic configuration
    I like a `docs/` directory in $HOME, so this is where I keep my
    org files. I'm trying out keeping notes in a single file.

    #+BEGIN_SRC emacs-lisp
      (setq org-directory "~/docs/org")
      (setq org-default-notes-file (concat org-directory "/notes.org"))
    #+END_SRC

    I would like to be able to keep an agenda and get to it quickly.

    #+BEGIN_SRC emacs-lisp
      (define-key global-map "\C-ca" 'org-agenda)
    #+END_SRC

    I like a few different agenda files

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-files
            '("~/docs/org/personal/meetups.org" "~/docs/org/tasks.org" "~/docs/org/work/lfo.org"))
    #+END_SRC

    Keep timestamps in a drawer

    #+BEGIN_SRC emacs-lisp
      (setq org-clock-into-drawer t)
    #+END_SRC

    Configure how Org does time clocking on task's state changes, from
    http://sachachua.com/blog/2007/12/clocking-time-with-emacs-org/

    #+BEGIN_SRC emacs-lisp
      (eval-after-load 'org
        '(progn
           (defun smd/org-clock-in-if-starting ()
             "Clock in when the task is marked STARTED."
             (when (and (string= org-state "STARTED")
                        (not (string= org-last-state org-state)))
               (org-clock-in)))
           (add-hook 'org-after-todo-state-change-hook
                     'smd/org-clock-in-if-starting)
           (defadvice org-clock-in (after smd activate)
             "Set this task's status to 'STARTED'."
             (org-todo "STARTED"))
           (defun smd/org-clock-out-if-waiting ()
             "Clock out when the task is marked WAITING."
             (when (and (string= org-state "WAITING")
                        (equal (marker-buffer org-clock-marker) (current-buffer))
                        (< (point) org-clock-marker)
                        (> (save-excursion (outline-next-heading) (point))
                           org-clock-marker)
                        (not (string= org-last-state org-state)))
               (org-clock-out)))
           (add-hook 'org-after-todo-state-change-hook
                     'smd/org-clock-out-if-waiting)))
    #+END_SRC

*** SOMEDAY GTD ideas
Use a GTD-style set of states for tasks
#+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords
        '((sequence "TODO" "STARTED" "WAITING" "SOMEDAY" "DONE")))
#+END_SRC
*** INPROGRESS Capturing notes quickly
    `C-c r` is how I'll get to "remembering" a thing.

    #+BEGIN_SRC emacs-lisp
      (define-key global-map "\C-cr" 'org-capture)
    #+END_SRC

    Org is good at helping me keep track of things that I don't want to forget.
    For example, I make journal entries that are personal, lists of tasks for
    various projects, and keep a log of my bike rides.

    TODO: I would like my ride log to go under the training log heading.

    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(
              ("t" "TODO item" entry
               (file+headline "~/docs/org/tasks.org" "new tasks")
               "* TODO %?")
              ("j" "Journal entry" entry
               (file+datetree "~/docs/org/personal/journal.org")
               "* %?")
              ("r" "A Bicycle Ride" entry
               (file+datetree  "~/docs/org/personal/bikes.org")
               "* %U\n  %?")
              ("m" "Meetup note" entry
               (file+headline  "~/docs/org/personal/meetups.org" "Tasks")
               "* %U\n  %?")
              ))
    #+END_SRC

*** INPROGRESS Literate Progragramming
I like writing in Org, so I'm testing the waters of writing my code in a
literate style. It begins as a narrative where we use the structural aspects to
represent namespaces. If we can draw a good outline of our code, then maybe we
can keep the complexity down to a minimum.

I'll use some tricks when I write my spells, though. We'll use Cider to evaluate
Clojure code within an Org code-block

#+BEGIN_SRC emacs-lisp
  (setq org-babel-clojure-backend 'cider)
  (require 'ob-clojure)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh . t)
     (clojure . t)))
#+END_SRC

I would like to be able to insert code snippets, so let's try yasnippet

#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

** Basics and settings used everywhere

   Mostly settings that don't fit in elsewhere, so they end up here. However,
   this does include settings that aren't part of packages and need to configure
   Emacs' built-in packages.

*** General settings
Turn on debugging (it will be turned off at the end). In case something happens
during loading that breaks something, it's nice to have debug information.

#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC

Don't show the startup message.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC

Don't beep.

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function (lambda()))
#+END_SRC

Always indent, per mode, on newline.

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

Dakrone says: "Always, *always*, prefer UTF-8, anything else is insanity."

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC

Turn on syntax highlighting for all buffers:

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

Don't warn me about large files unless they're at least 25mb:

#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold (* 25 1024 1024))
#+END_SRC

If you change buffer, or focus, disable the current buffer's mark:

#+BEGIN_SRC emacs-lisp
(transient-mark-mode t)
#+END_SRC

Turn off all kinds of modes, I don't need the menu bar, or the tool bar:

#+BEGIN_SRC emacs-lisp
(when (functionp 'menu-bar-mode)
  (menu-bar-mode -1))
(when (functionp 'set-scroll-bar-mode)
  (set-scroll-bar-mode 'nil))
(when (functionp 'mouse-wheel-mode)
  (mouse-wheel-mode -1))
(when (functionp 'tooltip-mode)
  (tooltip-mode -1))
(when (functionp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (functionp 'blink-cursor-mode)
  (blink-cursor-mode -1))
#+END_SRC

Why would you not want to know lines/columns in your mode-line?

#+BEGIN_SRC emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC

Ignore case when using completion for file names:

#+BEGIN_SRC emacs-lisp
(setq read-file-name-completion-ignore-case t)
#+END_SRC

Don't make me type "yes" at a prompt

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Set up the fill-column to 80 characters and set tab width to 2

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
(setq-default default-tab-width 2)
(setq-default indent-tabs-mode nil)
#+END_SRC

It's okay to refer to a file by a symlink:

#+BEGIN_SRC emacs-lisp
(setq-default find-file-visit-truename nil)
#+END_SRC

Require a newline at the end of files:

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

Uniquify buffers, using angle brackets, so you get =foo= and
=foo<2>=:

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
#+END_SRC

Single space still ends a sentence:

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

Always turn on whitespace mode

#+BEGIN_SRC emacs-lisp
(whitespace-mode t)
#+END_SRC

Indicate trailing empty lines in the GUI, but get rid of them on save. That's
sneaky.

#+BEGIN_SRC emacs-lisp
(set-default 'indicate-empty-lines t)
(setq show-trailing-whitespace t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Bury the =*scratch*= buffer, never kill it:

#+BEGIN_SRC emacs-lisp
(defadvice kill-buffer (around kill-buffer-around-advice activate)
  (let ((buffer-to-kill (ad-get-arg 0)))
    (if (equal buffer-to-kill "*scratch*")
        (bury-buffer)
      ad-do-it)))
#+END_SRC

Prettify all the symbols, if available (an Emacs 24.4 feature):

#+BEGIN_SRC emacs-lisp
(when (boundp 'global-prettify-symbols-mode)
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (push '("lambda" . ?λ) prettify-symbols-alist)))
  (add-hook 'clojure-mode-hook
            (lambda ()
              (push '("fn" . ?ƒ) prettify-symbols-alist)))
  (global-prettify-symbols-mode +1))
#+END_SRC

*** Getting Emacs to play with Tmux in a terminal

Oh, this is somewhat hellish, but there are a few things going on here:
1. You must have the TERM environment setup correctly, to "screen-256color" or so when in Tmux
2. You must have "xterm-keys on" in your Tmux config
3. You must do some funky remapping of keys, according to the internet....I hope there's a better way.

#+BEGIN_SRC emacs-lisp
  ;; This is from: https://wiki.archlinux.org/index.php/Emacs#Shift_.2B_Arrow_keys_not_working_in_emacs_within_tmux

  (if (getenv "TMUX")
      (progn
        (let ((x 2) (tkey ""))
          (while (<= x 8)
            ;; shift
            (if (= x 2)
                (setq tkey "S-"))
            ;; alt
            (if (= x 3)
                (setq tkey "M-"))
            ;; alt + shift
            (if (= x 4)
                (setq tkey "M-S-"))
            ;; ctrl
            (if (= x 5)
                (setq tkey "C-"))
            ;; ctrl + shift
            (if (= x 6)
                (setq tkey "C-S-"))
            ;; ctrl + alt
            (if (= x 7)
                (setq tkey "C-M-"))
            ;; ctrl + alt + shift
            (if (= x 8)
                (setq tkey "C-M-S-"))

            ;; arrows
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d A" x)) (kbd (format "%s<up>" tkey)))
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d B" x)) (kbd (format "%s<down>" tkey)))
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d C" x)) (kbd (format "%s<right>" tkey)))
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d D" x)) (kbd (format "%s<left>" tkey)))
            ;; home
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d H" x)) (kbd (format "%s<home>" tkey)))
            ;; end
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d F" x)) (kbd (format "%s<end>" tkey)))
            ;; page up
            (define-key key-translation-map (kbd (format "M-[ 5 ; %d ~" x)) (kbd (format "%s<prior>" tkey)))
            ;; page down
            (define-key key-translation-map (kbd (format "M-[ 6 ; %d ~" x)) (kbd (format "%s<next>" tkey)))
            ;; insert
            (define-key key-translation-map (kbd (format "M-[ 2 ; %d ~" x)) (kbd (format "%s<delete>" tkey)))
            ;; delete
            (define-key key-translation-map (kbd (format "M-[ 3 ; %d ~" x)) (kbd (format "%s<delete>" tkey)))
            ;; f1
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d P" x)) (kbd (format "%s<f1>" tkey)))
            ;; f2
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d Q" x)) (kbd (format "%s<f2>" tkey)))
            ;; f3
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d R" x)) (kbd (format "%s<f3>" tkey)))
            ;; f4
            (define-key key-translation-map (kbd (format "M-[ 1 ; %d S" x)) (kbd (format "%s<f4>" tkey)))
            ;; f5
            (define-key key-translation-map (kbd (format "M-[ 15 ; %d ~" x)) (kbd (format "%s<f5>" tkey)))
            ;; f6
            (define-key key-translation-map (kbd (format "M-[ 17 ; %d ~" x)) (kbd (format "%s<f6>" tkey)))
            ;; f7
            (define-key key-translation-map (kbd (format "M-[ 18 ; %d ~" x)) (kbd (format "%s<f7>" tkey)))
            ;; f8
            (define-key key-translation-map (kbd (format "M-[ 19 ; %d ~" x)) (kbd (format "%s<f8>" tkey)))
            ;; f9
            (define-key key-translation-map (kbd (format "M-[ 20 ; %d ~" x)) (kbd (format "%s<f9>" tkey)))
            ;; f10
            (define-key key-translation-map (kbd (format "M-[ 21 ; %d ~" x)) (kbd (format "%s<f10>" tkey)))
            ;; f11
            (define-key key-translation-map (kbd (format "M-[ 23 ; %d ~" x)) (kbd (format "%s<f11>" tkey)))
            ;; f12
            (define-key key-translation-map (kbd (format "M-[ 24 ; %d ~" x)) (kbd (format "%s<f12>" tkey)))
            ;; f13
            (define-key key-translation-map (kbd (format "M-[ 25 ; %d ~" x)) (kbd (format "%s<f13>" tkey)))
            ;; f14
            (define-key key-translation-map (kbd (format "M-[ 26 ; %d ~" x)) (kbd (format "%s<f14>" tkey)))
            ;; f15
            (define-key key-translation-map (kbd (format "M-[ 28 ; %d ~" x)) (kbd (format "%s<f15>" tkey)))
            ;; f16
            (define-key key-translation-map (kbd (format "M-[ 29 ; %d ~" x)) (kbd (format "%s<f16>" tkey)))
            ;; f17
            (define-key key-translation-map (kbd (format "M-[ 31 ; %d ~" x)) (kbd (format "%s<f17>" tkey)))
            ;; f18
            (define-key key-translation-map (kbd (format "M-[ 32 ; %d ~" x)) (kbd (format "%s<f18>" tkey)))
            ;; f19
            (define-key key-translation-map (kbd (format "M-[ 33 ; %d ~" x)) (kbd (format "%s<f19>" tkey)))
            ;; f20
            (define-key key-translation-map (kbd (format "M-[ 34 ; %d ~" x)) (kbd (format "%s<f20>" tkey)))

            (setq x (+ x 1))))))
#+END_SRC
*** SMEX

https://github.com/nonsequitur/smex

#+BEGIN_SRC emacs-lisp
  (smex-initialize)

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)

  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

*** Setup Ido Mode for fancy customizations

Use ido-mode everywhere! See https://www.masteringemacs.org/article/introduction-to-ido-mode

#+BEGIN_SRC emacs-lisp
  (require 'ido-vertical-mode)
  (require 'ido-ubiquitous)

  (ido-mode 1)
  (ido-everywhere 1)
  (ido-ubiquitous-mode 1)
  (ido-vertical-mode 1)

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)

#+END_SRC

*** saveplace
Navigates back to where you were editing a file next time you open it

#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory)))
#+END_SRC

** Ace Jump Mode

From <https://github.com/winterTTr/ace-jump-mode>, we get a nice way to jump quickly around a buffer.
For a demo, watch the Emacs Rocks video: <https://www.youtube.com/watch?v=UZkpmegySnc>

#+BEGIN_SRC emacs-lisp
  (autoload
    'ace-jump-mode
    "ace-jump-mode"
    "Emacs quick move minor mode"
    t)

  ;; you can select the key you prefer to
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

  (autoload
    'ace-jump-mode-pop-mark
    "ace-jump-mode"
    "Ace jump back:-)"
    t)
  (eval-after-load "ace-jump-mode"
    '(ace-jump-mode-enable-mark-sync))
  (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)


#+END_SRC

** Multiple Cursors

I like this, having learned about it in Sublime Text and the IntelliJ family of editors.

#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)

  (global-set-key (kbd "C-c e") 'mc/edit-lines)
  (global-set-key (kbd "C-<down>") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<up>") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<down>") 'mc/mark-all-like-this)
#+END_SRC

** Version Control

Most of the time, I use git for version control, so it's nice to be able to look
at diffs and make commtits without having to leave Emacs. [[http://magit.vc/][Magit]] fills this niche
pretty well, but for some reason some of the basic commands aren't bound for
me...

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** Programming language-specific configuration

   Configuration options for language-specific packages live here.

*** General prog-mode hooks

    Some general settings that should apply to all programming modes, turning
    on subword mode and idle-highlight-mode:

#+BEGIN_SRC emacs-lisp
  (use-package idle-highlight-mode
    :init
    (progn
      (defun smd/idle-highlight-hook ()
        (interactive)
        (when (fboundp 'idle-highlight-mode)
          (idle-highlight-mode t))
        (setq show-trailing-whitespace t)
        (subword-mode t))

      (add-hook 'prog-mode-hook #'smd/idle-highlight-hook)))
#+END_SRC

    In programming modes, make sure things like FIXME and TODO are
    highlighted so they stand out:

#+BEGIN_SRC emacs-lisp
(defun smd/add-watchwords ()
  "Highlight FIXME, TODO, and NOCOMMIT in code"
  (font-lock-add-keywords
   nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
          1 '((:foreground "#d7a3ad") (:weight bold)) t))))

(add-hook 'prog-mode-hook 'smd/add-watchwords)
#+END_SRC

    Display parentheses nicely

#+BEGIN_SRC emacs-lisp
  (require 'paren)
  (set-face-background 'show-paren-match "red")
  (add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC

*** Paredit

   Paredit for all the lisps.

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :diminish "()"
  :config
  (progn
    (define-key paredit-mode-map (kbd "M-)") 'paredit-forward-slurp-sexp)
    (define-key paredit-mode-map (kbd "M-(") 'paredit-forward-barf-sexp)
    (define-key paredit-mode-map (kbd ")") 'paredit-close-parenthesis)))
#+END_SRC
*** Clojure

- eldoc prints the argument list for a function as it is being typed.

- subword allows you to move between word boundaries (e.g., CapitalizedSubWords)
  in a nomenclature.

- clj-refactor is good.
#+BEGIN_SRC emacs-lisp
  (defun smd/clojure-things-hook ()
    "Set up clojure-y things"

    (paredit-mode 1)
    (subword-mode t)

    (company-mode 1)

    (clj-refactor-mode t)
    (cljr-add-keybindings-with-prefix "C-c C-m")

    ;; NOTE: These are possibly wonky settings...
    (define-key paredit-mode-map (kbd "M-[") nil)
    (define-key paredit-mode-map (kbd "<C-right>") 'paredit-forward-slurp-sexp))

  (use-package clojure-mode
    :config
    (progn (add-hook 'clojure-mode-hook 'smd/clojure-things-hook)))
#+END_SRC

    Let's define a couple of helper functions for setting up the cider and
    autocomplete packages:

#+BEGIN_SRC emacs-lisp
  (defun smd/setup-cider ()
    (lambda ()
      (setq cider-history-file "~/.nrepl-history"
            cider-hide-special-buffers t
            cider-repl-history-size 10000
            cider-prefer-local-resources t
            cider-popup-stacktraces-in-repl t
            nrepl-log-messages nil
            cider-repl-history-file "src/cider-repl.log")
      (paredit-mode 1)
      (eldoc-mode 1)
      (add-hook 'cider-repl-mode-hook #'company-mode)
      (add-hook 'cider-mode-hook #'company-mode)))
#+END_SRC

    And then finally use them

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :init
    (progn
      (add-hook 'cider-mode-hook 'smd/setup-cider)
      (add-hook 'cider-repl-mode-hook 'smd/setup-cider)
      (add-hook 'cider-mode-hook 'smd/clojure-things-hook)
      (add-hook 'cider-repl-mode-hook 'smd/clojure-things-hook)
      ;; (setq company-idle-delay nil) ; never start completions automatically
      (global-set-key (kbd "M-TAB") #'company-complete)))
#+END_SRC

Write backup files to own directory

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
#+END_SRC

Make backups of files, even when they're in version control
#+BEGIN_SRC emacs-lisp
(setq vc-make-backup-files t)
#+END_SRC

** SQL things

Sometimes it is nice to be able to connect to a relational database for some
development of an idea. Since I tend to use PostgreSQL, sql-postgres can be
configured:

#+begin_src emacs-lisp :tangle yes
  (setq sql-postgres-login-params
        '((user :default "smd")
          (database :default "postgres")
          (server :default "localhost")
          (port :default 5432)))
#+end_src
** Projectile

Always use Projectile because turning it on for specific things is annoying.

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

** Snippets

Yasnippet can be setup with

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-=") 'yas-insert-snippet)

  ;; (setq yas-snippet-dirs
  ;;       '("~/.emacs.d/snippets"                 ;; personal snippets
  ;;         "/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
  ;;         "/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
  ;;         "/path/to/yasnippet/snippets"         ;; the default collection
  ;;         ))

  (yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
#+END_SRC

I can make a geojson snippet with this:

#+begin_src javascript
  {
      "type": "Feature",
      "properties": {
          "name": "Janet's Cabin",
          "amenity": "Gas, electric lights, multiple rooms, ",
          "comments": "This is the first hut the Mo and I visited. It was a learning experience."
      },
      "geometry": {
          "type": "Point",
          "coordinates": [-104.99404, 39.75621]
      }
  }
#+end_src

** Misc editing functions

Some IDEs (like RubyMine and IntelliJ) let you put a newline above the point.
This is a shot at getting that behavior in Emacs.

#+BEGIN_SRC emacs-lisp
  (defun smd/smart-open-line-above ()
    "Insert an empty line above the current line.
    Position the cursor at it's beginning, according to the current mode."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key [(control shift return)] 'smd/smart-open-line-above)
#+END_SRC

* Finalizers
Turn off debugging, now that initialization has ended

#+BEGIN_SRC emacs-lisp
(setq debug-on-error nil)
#+END_SRC
